#lang ivy1.7

object system = {
  action send = {
  }
}

object node = {
  type t

  relation edge(A:t, B:t)
  relation w(N:t, V:value.t)

  after init {
    w(N, _) := false;
    w(N, val(N)) := true;
  }

  function incomming_message(self:t, other:t) : unique_set.t

  action next_message(self:t) returns (msg: unique_set.t) = {
    instance m : unique_set
  }
}

module unique_set = {
  type t

  function next(M:t, V:value.t) : value.t

  action get_next(self:t, value:value.t) returns (next_value:value.t) {
    if some v:value.t . next(self, value) = v {
      next_value := v;
    } else {
      next_value := null;
    }
  }

  action add(self:t, value:value.t) = {
    i
  }

}
