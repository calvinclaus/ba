#lang ivy1.7

include order

type i
interpret i -> int

type value
interpret value -> int

object node = {
  instance t : iterable

  #graph/system related
  relation edge(A:t, B:t)
  relation failed(N:t)
  function val(X:node.t) : value
  function default(X: node.t) : value
  individual def : value
  function min_val(N:node.t) : value

  #state
  function rounds(SELF:t) : i
  relation decision(SELF:t, VALUE:value)

  #communication
  relation message(N:t, V:value)
  relation incomming_message(SELF:t, OTHER:t)

  after init {
    def := *;
    default(N) := def;
    rounds(N) := 0;
    min_val(N) := val(N);
    incomming_message(A, B) := false;
    failed(N) := false;
    decision(N, V) := false;
  }

  # step 1
  action message_generation(self:t, other:t) = {
    call maybe_fail(self);
    if ~failed(self) {
      var tmp := (system.f)/(system.k);
      if rounds(self) <= tmp {
        message(self, min_val(self)) := true;
        incomming_message(other, self) := true;
      };
    };
  }


  # step 2
  action state_transition(self:t) = {
    call maybe_fail(self);
    if ~failed(self) {
      rounds(self) := rounds(self)+1;
      call update_min_val(self);
      call maybe_decide(self);
    };
  }

  # 'private' util functions

  action update_min_val(self:t) = {
    if some v:value . forall O . ((incomming_message(self, O) & message(O, v)) | (min_val(self) = v)) minimizing v {
      min_val(self) := v;
    }
  }

  action maybe_decide(self:t) = {
    if (rounds(self) = (((system.f)/(system.k))+1)) {
      call system.maybe_increment_num_unique_decisions(min_val(self));
      decision(self, min_val(self)) := true;
    };
  }

  action maybe_fail(self:t) = {
    if ~failed(self) {
      failed(self) := *;
      var num:i;
      call num := num_failed_nodes;
      assume num <= system.f;
    }
  }
}

object system = {
  individual f : i
  individual k : i
  individual rounds:i
  individual num_unique_decisions : i

  after init {
    rounds := 0;
    num_unique_decisions := 0;
    var num: i;
    call num := num_nodes;
    assume f >= 0 & num > f;
    assume k >= 1;
    node.edge(A, B) := true;
    node.edge(A, A) := false;
  }

  action step = {
    call step1;
    call step2;
    rounds := rounds+1;
  }

  #maybe these iterations can be replaced with an ensure in node.message_generation?
  action step1 = {
    var first_iter := node.t.iter.create(0);
    while ~first_iter.is_end
    invariant true
    {
      var second_iter := node.t.iter.create(0);
      while ~second_iter.is_end
      invariant true
      {
        var a := first_iter.val;
        var b := second_iter.val;
        if node.edge(a, b) {
          call node.message_generation(a, b);
        };
        second_iter := second_iter.next;
      };
      first_iter := first_iter.next;
    }
  }

  action step2 = {
    var iter := node.t.iter.create(0);
    while ~iter.is_end
    invariant true
    {
      call node.state_transition(iter.val);
    };
    node.incomming_message(A, B) := false;
    node.message(A, V) := false;
  }

  action maybe_increment_num_unique_decisions(val:value) = {
    if exists N . node.decision(N, val) {
    } else {
      num_unique_decisions := num_unique_decisions + 1;
    }
  }
}

export system.step

action num_nodes returns(num:i) = {
  num := 0;
  var iter := node.t.iter.create(0);
  while ~iter.is_end
  {
    num := num+1;
    iter := iter.next;
  };
}
action num_failed_nodes returns(num:i) = {
  num := 0;
  var iter := node.t.iter.create(0);
  while ~iter.is_end
  {
    if node.failed(iter.val) {
      num := num+1;
    };
    iter := iter.next;
  };
}



# There is a subset of W of V, |W| = k, such that all decision values are in W.
invariant system.num_unique_decisions <= system.k

# Any decision value for any process is the initial value of some process.
invariant node.decision(N, V) -> exists M . node.val(M) = V
invariant ~node.decision(N, V) | exists M . node.val(M) = V
invariant exists M . ~node.decision(N, V) | node.val(M) = V

# All nonfaulty processes eventually decide.
#invariant eventually ~node.failed(N) -> exists V . node.decision(N,V)
invariant (system.rounds >= (((system.f)/(system.k))+1)) -> (forall N . (~node.failed(N)) -> exists V . node.decision(N,V))

