#lang ivy1.7



type value

type node
object node = {

  #graph/system related
  function val(X:node) : value
  function default(X: node) : value
  individual def : value
  relation failed(A:node)
  relation failed_before_round(A:node)
  relation failed_during_round(A:node)
  relation has_single_value(N:node)

  #state
  relation w(SELF:node, V:value)
  relation decision(SELF:node, VALUE:value)

  #communication
  relation message(N:node, V:value)
  relation incomming_message(SELF:node, OTHER:node)
  relation incomming_message_failing(SELF:node, OTHER:node)

  after init {
    def := *;
    default(N) := def;
    w(N, V) := V=node.val(N);
    incomming_message(A, B) := false;
    decision(N, V) := false;

    ensure forall N . (exists V:value . w(N, V) & ~exists O . w(N, O) & O ~= V);
  }


}

object system = {
  individual decision_round:bool
  individual clean_round_occured:bool


  after init {
    clean_round_occured := false;
    decision_round := false;
    node.failed_before_round(N) := false;
    node.failed(N) := false;
    node.has_single_value(N) := false;
  }

  action round = {
    require ~node.decision(N,V);
    assume ~decision_round;
    node.failed_before_round(N) := node.failed(N);
    call step1;
    call fail_nodes_during_step_1;
    clean_round_occured := (clean_round_occured | (forall N . ~node.failed_during_round(N)));
    if clean_round_occured {
      decision_round := *;
    };
    call step2
  }

  action step1 = {
    node.message(A, M) := node.w(A, M) & ~node.failed(A);
    node.incomming_message(O, A) := ~node.failed(A);
  }

  action fail_nodes_during_step_1 = {
    node.failed_during_round(N) := *;
    assume node.failed_during_round(N) -> ~node.failed(N);
    node.incomming_message_failing(O, F) := *;
    node.incomming_message(N, M) := (node.failed_during_round(M) & node.incomming_message_failing(N, M)) | (~node.failed_during_round(M) & node.incomming_message(N,M));
    node.failed(N) := (node.failed(N) | node.failed_during_round(N));
    assume exists N . ~node.failed(N);
    ensure node.failed_before_round(N) -> node.failed(N);
    ensure node.failed_during_round(N) -> node.failed(N);
    ensure node.failed_before_round(N) -> ~node.incomming_message(M, N);
  }

  action step2 = {
    node.w(N,V) := (node.w(N,V) | (~node.failed(N) & exists J . (node.incomming_message(N, J) & node.message(J, V))));

    if decision_round {
      node.has_single_value(N) := (exists J . node.w(N, J)) & (forall V,O . O=V | (node.w(N,V) -> ~node.w(N, O)));
      node.decision(N, K) := node.has_single_value(N) & node.w(N,K) & ~node.failed(N);
      node.decision(N, node.default(N)) := (~node.has_single_value(N) | node.decision(N, node.default(N))) & ~node.failed(N);
    };

    node.incomming_message(A, B) := false;
    node.message(A, V) := false;
  }

}

export system.round


####### system correctness checks #######

# f < n
invariant exists N . ~node.failed(N)

# 'after' a node has failed it cannot start working again
invariant node.failed_before_round(N) -> node.failed(N)
# 'after' a node has failed it will not send anything
invariant node.failed_before_round(N) -> ~node.incomming_message(M, N)

# If the decision round occured, a clean round must have occured
invariant system.decision_round -> system.clean_round_occured

####### system correctness checks #######



####### correctness conditions #######

# Agreement: No two processes decide on different values.
invariant node.decision(N, V) -> (~exists O . node.decision(N, O) & O~=V) # every node decides on at most one value
invariant (~node.failed(A) & ~node.failed(B)) -> (node.decision(A, V) = node.decision(B, V))

# Validity: If all processes start with the same initial value v, then v is the only possible decision value
invariant (exists N,M . node.val(N) ~= node.val(M)) | (system.decision_round -> (~node.failed(N2) -> node.decision(N2, node.val(N2))))

# Termination: All nonfaulty processes eventually decide.
invariant system.decision_round <-> (forall N . (~node.failed(N) -> (exists V . node.decision(N,V))))

####### correctness conditions end #######




####### invariants necessary for induction #######

# initial value is in W
invariant node.w(N, node.val(N))
# the global default is the one the nodes know
invariant node.default(N) = node.def
# if a value is in a process' W, it must be initial value of some other process ( no invented values )
invariant node.w(N, V) -> (exists M . node.val(M)=V)
# lemma 1:
invariant system.clean_round_occured -> ((~node.failed(A) & ~node.failed(B)) -> (node.w(A, V) = node.w(B, V)))



####### invariants necessary for induction end #######
